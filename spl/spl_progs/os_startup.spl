//loading timer interrupt routine
loadi(4, 17);
loadi(5, 18);

//loading exhandler
loadi(2, 15);
loadi(3, 16);

//loading EXIT
loadi(22, 35);
loadi(23, 36);

//library
loadi(63, 13);
loadi(64, 14);

loadi(65, 7);
loadi(66, 8);

//library - 2 pages i.e 0,1
[PAGE_TABLE_BASE + 0] = 63;
[PAGE_TABLE_BASE + 1] = "0100";
[PAGE_TABLE_BASE + 2] = 64;
[PAGE_TABLE_BASE + 3] = "0100";

//Heap - 2 pages i.e 2,3
[PAGE_TABLE_BASE + 4] = 78;
[PAGE_TABLE_BASE + 5] = "0110";
[PAGE_TABLE_BASE + 6] = 79;
[PAGE_TABLE_BASE + 7] = "0110";

//Code - 4 pages i.e 4,5,6,7
[PAGE_TABLE_BASE + 8] = 65;
[PAGE_TABLE_BASE + 9] = "0100";
[PAGE_TABLE_BASE + 10] = 66;
[PAGE_TABLE_BASE + 11] = "0100";
[PAGE_TABLE_BASE + 12] = -1;
[PAGE_TABLE_BASE + 13] = "0000";
[PAGE_TABLE_BASE + 14] = -1;
[PAGE_TABLE_BASE + 15] = "0000";

//stack - 2 pages i.e 8,9
[PAGE_TABLE_BASE + 16] = 76;
[PAGE_TABLE_BASE + 17] = "0110";
[PAGE_TABLE_BASE + 18] = 77;
[PAGE_TABLE_BASE + 19] = "0110";

PTBR = PAGE_TABLE_BASE;
//10 entries so 
PTLR = 10;

//entry point for code
SP = 8 * 512;

//entry point for stack
//the starting instruction address is at the second word in code page
[76*512] = [65*512 + 1];
breakpoint;
ireturn;
