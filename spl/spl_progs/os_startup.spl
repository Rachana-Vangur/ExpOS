//INIT 
loadi(65,7); 
loadi(66,8);

//exit systemcall
loadi(22,35);
loadi(23,36);

//exception handler
loadi(2, 15);
loadi(3, 16);


//setting page-table for init

//
[PAGE_TABLE_BASE + 0] = -1;
[PAGE_TABLE_BASE + 1] = "0000";
[PAGE_TABLE_BASE + 2] = -1;
[PAGE_TABLE_BASE + 3] = "0000";
[PAGE_TABLE_BASE + 4] = -1;
[PAGE_TABLE_BASE + 5] = "0000";
[PAGE_TABLE_BASE + 6] = -1;
[PAGE_TABLE_BASE + 7] = "0000";

//code
[PAGE_TABLE_BASE + 8] = 65;
[PAGE_TABLE_BASE + 9] = "0100";
[PAGE_TABLE_BASE + 10] = 66;
[PAGE_TABLE_BASE + 11] = "0100";
[PAGE_TABLE_BASE + 12] = -1;
[PAGE_TABLE_BASE + 13] = "0000";
[PAGE_TABLE_BASE + 14] = -1;
[PAGE_TABLE_BASE + 15] = "0000";

//stack
[PAGE_TABLE_BASE + 16] = 76;
[PAGE_TABLE_BASE + 17] = "0110";
[PAGE_TABLE_BASE + 18] = -1;
[PAGE_TABLE_BASE + 19] = "0000";





//setting up PTBR and PTLR for address translation
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//setting point of entry through stack
[76 * 512] = 4 * 512z;
SP = 8 * 512;

//returning to usermode
ireturn;


