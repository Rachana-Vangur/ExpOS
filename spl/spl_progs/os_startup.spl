//library
loadi(63, 13);
loadi(64, 14);

//init
loadi(65, 7);
loadi(66, 8);

//exit
loadi(22, 35);
loadi(23, 36);

//exhandler
loadi(2, 15);
loadi(3, 16);

//timer
loadi(4, 17);
loadi(5, 18);

//int 7
loadi(16, 29);
loadi(17, 30);

//idle
loadi(69, 11);
loadi(70, 12);




 
//process table 
//page tables 

//pagetable for idle

//library
[PAGE_TABLE_BASE + 0] = 63;
[PAGE_TABLE_BASE + 1] = "0100";
[PAGE_TABLE_BASE + 2] = 64;
[PAGE_TABLE_BASE + 3] = "0100";

//heap
[PAGE_TABLE_BASE + 4] = -1;
[PAGE_TABLE_BASE + 5] = "0000";
[PAGE_TABLE_BASE + 6] = -1;
[PAGE_TABLE_BASE + 7] = "0000";

//code
[PAGE_TABLE_BASE + 8] = 69;
[PAGE_TABLE_BASE + 9] = "0100";
[PAGE_TABLE_BASE + 10] = 70;
[PAGE_TABLE_BASE + 11] = "0100";
[PAGE_TABLE_BASE + 12] = -1;
[PAGE_TABLE_BASE + 13] = "0000";
[PAGE_TABLE_BASE + 14] = -1;
[PAGE_TABLE_BASE + 15] = "0000";

//stack
[PAGE_TABLE_BASE + 16] = 76;
[PAGE_TABLE_BASE + 17] = "0110";
[PAGE_TABLE_BASE + 18] = -1;
[PAGE_TABLE_BASE + 19] = "0000";

//pagetable for init

//library
[PAGE_TABLE_BASE + 20] = 63;
[PAGE_TABLE_BASE + 21] = "0100";
[PAGE_TABLE_BASE + 22] = 64;
[PAGE_TABLE_BASE + 23] = "0100";

//heap
[PAGE_TABLE_BASE + 24] = 79;
[PAGE_TABLE_BASE + 25] = "0100";
[PAGE_TABLE_BASE + 26] = 80;
[PAGE_TABLE_BASE + 27] = "0100";

//code
[PAGE_TABLE_BASE + 28] = 65;
[PAGE_TABLE_BASE + 29] = "0100";
[PAGE_TABLE_BASE + 30] = 66;
[PAGE_TABLE_BASE + 31] = "0100";
[PAGE_TABLE_BASE + 32] = -1;
[PAGE_TABLE_BASE + 33] = "0000";
[PAGE_TABLE_BASE + 34] = -1;
[PAGE_TABLE_BASE + 35] = "0000";

//stack
[PAGE_TABLE_BASE + 36] = 77;
[PAGE_TABLE_BASE + 37] = "0110";
[PAGE_TABLE_BASE + 38] = 78;
[PAGE_TABLE_BASE + 39] = "0110";

PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//process table for init
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 4] = CREATED;
[PROCESS_TABLE + 11] = 81* 512; //MAYBEEE
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 13] = 8 * 512;
[PROCESS_TABLE + 14] = PTBR;
[PROCESS_TABLE + 15] = 10; 
//process table for idle

[PROCESS_TABLE + 17] = 1; 
[PROCESS_TABLE + 20] = RUNNING;
[PROCESS_TABLE + 27] = 80;
[PROCESS_TABLE + 28] = 82*512;   
[PROCESS_TABLE + 29] = 8 * 512;
[PROCESS_TABLE + 30] = PTBR + 20;
[PROCESS_TABLE + 31] = PTLR;


//setting to run the first instruction i.e SP
SP = 8 * 512;
[77 * 512] = [65* 512 + 1];

[76* 512] = [69* 512 + 1];
//ireturning  
ireturn;